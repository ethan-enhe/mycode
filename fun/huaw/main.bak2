#include <bits/stdc++.h>

using namespace std;
//{{{ Def
#define fi first
#define se second
#define vec vector
#define all(x) (x).begin(), (x).end()
#define unq(x) (x).erase(unique(all(x)), (x).end())
#define tpl template <typename T>

using ll =long long;
using ull = unsigned long long;
using db = double;
using ld = long double;
using pi = pair<ll, ll>;
//}}}
//{{{ Func
tpl pair<T, T> &operator+=(pair<T, T> &x, const pair<T, T> &y) { return x.fi += y.fi, x.se += y.se, x; }
tpl pair<T, T> operator+(const pair<T, T> &x, const pair<T, T> &y) { return {x.fi + y.fi, x.se + y.se}; }
tpl pair<T, T> &operator-=(pair<T, T> &x, const pair<T, T> &y) { return x.fi -= y.fi, x.se -= y.se, x; }
tpl pair<T, T> operator-(const pair<T, T> &x, const pair<T, T> &y) { return {x.fi - y.fi, x.se - y.se}; }
tpl pair<T, T> &operator*=(pair<T, T> &x, const ll &y) { return x.fi *= y, x.se *= y, x; }
tpl pair<T, T> operator*(const pair<T, T> &x, const ll &y) { return {x.fi * y, x.se * y}; }
tpl istream &operator>>(istream &is, pair<T, T> &y) { return is >> y.fi >> y.se; }
tpl ostream &operator<<(ostream &os, const pair<T, T> &y) { return os << '(' << y.fi << ',' << y.se << ')'; }
tpl T qpow(T x, ll y) {
    T r(1);
    while (y) {
        if (y & 1) r = r * x;
        x = x * x, y >>= 1;
    }
    return r;
}
ll gcd(ll a, ll b) {
    if (a < 0) a = -a;
    if (b < 0) b = -b;
    if (!a || !b) return a | b;
    ll U = __builtin_ctzll(a), V = __builtin_ctzll(b);
    a >>= U, b >>= V;
    if (U > V) U = V;
    while (a) {
        if (a < b) swap(a, b);
        a -= b;
        a >>= __builtin_ctzll(a);
    }
    return b << U;
}
tpl void umx(T &x, const T &y) { x = max(x, y); }
tpl void umn(T &x, const T &y) { x = min(x, y); }
bool inrng(const ll &x, const ll &l, const ll &r) { return l <= x && x <= r; }
bool insqr(const pi &x, const pi &lt, const pi &rb) {
    return lt.fi <= x.fi && x.fi <= rb.fi && lt.se <= x.se && x.se <= rb.se;
}
void setp(const ll &x) {
    cout.flags(ios::fixed);
    cout.precision(x);
}
template <typename T = ll>
T nxt() {
    T x;
    cin >> x;
    return x;
}
mt19937_64 mr(chrono::system_clock::now().time_since_epoch().count());
ll ri(const ll &l, const ll &r) { return uniform_int_distribution<ll>(l, r)(mr); }
ld rd(const ld &l, const ld &r) { return uniform_real_distribution<ld>(l, r)(mr); }
//}}}
const ll P = 1e9 + 7;
//{{{ Type
inline int redu(const int &x) { return x >= P ? x - P : x; }
inline int incr(const int &x) { return x + ((x >> 31) & P); }
struct mod {
    int v;
    mod() {}
    tpl mod(const T &_v) : v(_v) { assert(_v >= 0 && _v < P); }
    explicit operator ll() const { return v; }
    explicit operator int() const { return v; }
    mod &operator+=(const mod &y) { return v = redu(v + y.v), *this; }
    mod &operator-=(const mod &y) { return v = incr(v - y.v), *this; }
    mod &operator*=(const mod &y) { return v = (ll)v * y.v % P, *this; }
    mod &operator/=(const mod &y) { return v = (ll)v * qpow(y, P - 2).v % P, *this; }
    mod operator+(const mod &y) const { return mod(*this) += y; }
    mod operator-(const mod &y) const { return mod(*this) -= y; }
    mod operator*(const mod &y) const { return mod(*this) *= y; }
    mod operator/(const mod &y) const { return mod(*this) /= y; }
    bool operator==(const mod &y) const { return v == y.v; }
    bool operator!=(const mod &y) const { return v != y.v; }
    friend istream &operator>>(istream &is, mod &y) {
        ll x;
        is >> x;
        return y.v = incr(x % P), is;
    }
    friend ostream &operator<<(ostream &os, const mod &y) { return os << y.v; }
};
//}}}
const char nl = '\n';
const ll INF = 1e18;
const ll MXN = 1e5 + 5;

ll n, m,totw;

unordered_set<ll> reach[MXN];
unordered_set<ll> g[MXN],_g[MXN];
bool tp[MXN];
ll w[MXN];
void mrg(unordered_set<ll> &x,const unordered_set<ll> &y){
	for(auto i:y)x.insert(i);
}
ll p[MXN],_p[MXN];
void upd(ll p){
	queue<ll> q;
	q.push(p);
	while(!q.empty()){
		ll p=q.front();
		q.pop();
		unordered_set<ll> nxreach;
		if(_p[p])nxreach.insert(p);
		for(auto v:g[p])mrg(nxreach,reach[v]);
		if(nxreach!=reach[p]){
			reach[p]=nxreach;
			for(auto v:_g[p])q.push(v);
		}
	}
}
void ae(ll s,ll t,ll tp=1){
	if(tp==1){
		g[s].insert(t);
		_g[t].insert(s);
	}
	else{
		g[s].erase(t);
		_g[t].erase(s);
	}
}

void printedge(){
	cerr<<"---"<<endl;
	for(ll i=0;i<MXN;i++)
		for(auto &j:g[i])
				cerr<<i<<" "<<j<<endl;
	cerr<<"---"<<endl;
}
unordered_set<ll> alive;
int main() {
	cin>>m;
	ll m0=m;
	bool f=0;
	while(m--){
		string op;
		cin>>op;
		if(op=="AddNode"){
			ll id,c,p;char x;
			cin>>id;
			cin>>x;tp[id]=x=='S';
			cin>>w[id];
			cin>>c;
			while(c--){
				cin>>p;
				ae(p,id);
			}
			cin>>c;
			while(c--){
				cin>>p;
				ae(id,p);
			}
			++n;
		}
		else if(!f){
			f=1;
			for(ll i=1;i<=n;i++)p[i]=i;
			sort(p+1,p+1+n,[](ll x,ll y){
					return w[x]>w[y];
					});
			ll lim=min(n,500ll);
			for(ll i=1;i<=lim;i++){
				cerr<<p[i]<<endl;
				_p[p[i]]=i;
				reach[p[i]].insert(p[i]);
				alive.insert(p[i]);
			}
			for(int i=1;i<=n;i++)upd(i);
		}
		if(op=="SetRoot"){
			for(auto v:g[0]){
				_g[v].erase(0);
			}
			g[0].clear();

			int c;
			cin>>c;
			while(c--){
				int x;
				cin>>x;
				ae(0,x);
			}
			upd(0);
		}
		else if(op=="AddEdge"){
			int x,y;
			cin>>x>>y;
			ae(x,y);
			upd(x);
		}
		else if(op=="DeleteEdge"){
			int x,y;
			cin>>x>>y;
			ae(x,y,-1);
			upd(x);
		}
		else if(op=="Ask"){
			//printedge();
			ll x;
			cin>>x;
			vector<ll> ans;
			for(auto &i:alive)
				if(!reach[0].count(i)){
					ans.push_back(i);
				}
			cout<<ans.size()<<endl;
			for(auto i:ans){
				cout<<i<<" ";
				alive.erase(i);
			}
			cout<<endl;
			fflush(stdout);
		}
	}
    return 0;
}


