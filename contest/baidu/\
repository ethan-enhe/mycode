#include <bits/stdc++.h>

#include <cmath>
#include <vector>
using ld = long double;
using ll = long long;
using comp = std::complex<ld>;
using namespace std;
const ll P = 998244353;
void fft(vector<comp> &x, ll tp) {
    ll n = x.size();
    ll h = n / 2;
    if (n == 1) return;
    vector<comp> nx[2];
    nx[0].resize(h);
    nx[1].resize(h);
    for (ll i = 0; i < n; i++) nx[i & 1][i >> 1] = x[i];
    fft(nx[0], tp);
    fft(nx[1], tp);
    comp mult(1, 0), w(cosl(M_PI * 2 / n), sinl(M_PI * 2 / n) * tp);
    for (ll i = 0; i < h; i++) {
        x[i] = nx[0][i] + nx[1][i] * mult;
        x[i + h] = nx[0][i] - nx[1][i] * mult;
        mult *= w;
    }
}
vector<ll> mult(const vector<ll> &x, const vector<ll> &y) {
    ll len = x.size() + y.size() - 1;
    ll tmp = 1;
    while (tmp < len) tmp <<= 1;
    len = tmp;
    vector<comp> _x, _y;
    _x.assign(len, 0);
    _y.assign(len, 0);
    for (ll i = 0; i < x.size(); i++) _x[i] = x[i];
    for (ll i = 0; i < y.size(); i++) _y[i] = y[i];
    fft(_x, 1);
    fft(_y, 1);
    for (ll i = 0; i < len; i++) _x[i] *= _y[i];
    fft(_x, -1);
    vector<ll> res(x.size() + y.size() - 1);
    for (ll i = 0; i < res.size(); i++) res[i] = (ll)round(_x[i].real() / len) % P;
    return res;
}
ll qpow(ll x, ll y) {
    ll r = 1;
    while (y) {
        if (y & 1) r = r * x % P;
        x = x * x % P;
        y >>= 1;
    }
    return r;
}
const ll MXN = 1e5 + 5;
ll n;
ll arr[MXN];
vector<ll> solve(ll l,ll r){

}
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    for (ll i = 1; i <= n; i++) {
        ll x;
        cin >> x;
        arr[i] = qpow(x, P - 2);
    }
    for (ll i = 1; i <= n; i++) {
        ll x;
        cin >> x;
        arr[i] =arr[i]* qpow(x, P - 2);
    }

    return 0;
}
